//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\JSON.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class JSONLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		STRING=10, NUMBER=11, WS=12;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"STRING", "ESC", "UNICODE", "HEX", "NUMBER", "INT", "EXP", "WS"
	};


	public JSONLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'['", "']'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "STRING", 
		"NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JSON.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static JSONLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\xE");
		sb.Append("\x88\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3");
		sb.Append("\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\a\v");
		sb.Append("\x45\n\v\f\v\xE\vH\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x5\fO\n\f\x3");
		sb.Append("\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x5\xFZ\n\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x6\xF_\n\xF\r\xF\xE\xF`\x3\xF\x5\xF\x64\n\xF");
		sb.Append("\x3\xF\x5\xFg\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xFm\n\xF\x3\xF");
		sb.Append("\x5\xFp\n\xF\x3\x10\x3\x10\x3\x10\a\x10u\n\x10\f\x10\xE\x10");
		sb.Append("x\v\x10\x5\x10z\n\x10\x3\x11\x3\x11\x5\x11~\n\x11\x3\x11\x3");
		sb.Append("\x11\x3\x12\x6\x12\x83\n\x12\r\x12\xE\x12\x84\x3\x12\x3\x12");
		sb.Append("\x2\x2\x13\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15");
		sb.Append("\f\x17\x2\x19\x2\x1B\x2\x1D\r\x1F\x2!\x2#\xE\x3\x2\n\x4\x2$");
		sb.Append("$^^\n\x2$$\x31\x31^^\x64\x64hhppttvv\x5\x2\x32;\x43H\x63h\x3");
		sb.Append("\x2\x32;\x3\x2\x33;\x4\x2GGgg\x4\x2--//\x5\x2\v\f\xF\xF\"\"");
		sb.Append("\x90\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2");
		sb.Append("\x2\x2\x1D\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x3%\x3\x2\x2\x2\x5\'");
		sb.Append("\x3\x2\x2\x2\a)\x3\x2\x2\x2\t+\x3\x2\x2\x2\v-\x3\x2\x2\x2\r");
		sb.Append("/\x3\x2\x2\x2\xF\x31\x3\x2\x2\x2\x11\x36\x3\x2\x2\x2\x13<\x3");
		sb.Append("\x2\x2\x2\x15\x41\x3\x2\x2\x2\x17K\x3\x2\x2\x2\x19P\x3\x2\x2");
		sb.Append("\x2\x1BV\x3\x2\x2\x2\x1Do\x3\x2\x2\x2\x1Fy\x3\x2\x2\x2!{\x3");
		sb.Append("\x2\x2\x2#\x82\x3\x2\x2\x2%&\a}\x2\x2&\x4\x3\x2\x2\x2\'(\a.");
		sb.Append("\x2\x2(\x6\x3\x2\x2\x2)*\a\x7F\x2\x2*\b\x3\x2\x2\x2+,\a<\x2");
		sb.Append("\x2,\n\x3\x2\x2\x2-.\a]\x2\x2.\f\x3\x2\x2\x2/\x30\a_\x2\x2\x30");
		sb.Append("\xE\x3\x2\x2\x2\x31\x32\av\x2\x2\x32\x33\at\x2\x2\x33\x34\a");
		sb.Append("w\x2\x2\x34\x35\ag\x2\x2\x35\x10\x3\x2\x2\x2\x36\x37\ah\x2\x2");
		sb.Append("\x37\x38\a\x63\x2\x2\x38\x39\an\x2\x2\x39:\au\x2\x2:;\ag\x2");
		sb.Append("\x2;\x12\x3\x2\x2\x2<=\ap\x2\x2=>\aw\x2\x2>?\an\x2\x2?@\an\x2");
		sb.Append("\x2@\x14\x3\x2\x2\x2\x41\x46\a$\x2\x2\x42\x45\x5\x17\f\x2\x43");
		sb.Append("\x45\n\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x43\x3\x2\x2\x2\x45");
		sb.Append("H\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2GI\x3\x2\x2");
		sb.Append("\x2H\x46\x3\x2\x2\x2IJ\a$\x2\x2J\x16\x3\x2\x2\x2KN\a^\x2\x2");
		sb.Append("LO\t\x3\x2\x2MO\x5\x19\r\x2NL\x3\x2\x2\x2NM\x3\x2\x2\x2O\x18");
		sb.Append("\x3\x2\x2\x2PQ\aw\x2\x2QR\x5\x1B\xE\x2RS\x5\x1B\xE\x2ST\x5\x1B");
		sb.Append("\xE\x2TU\x5\x1B\xE\x2U\x1A\x3\x2\x2\x2VW\t\x4\x2\x2W\x1C\x3");
		sb.Append("\x2\x2\x2XZ\a/\x2\x2YX\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2");
		sb.Append("\x2[\\\x5\x1F\x10\x2\\^\a\x30\x2\x2]_\t\x5\x2\x2^]\x3\x2\x2");
		sb.Append("\x2_`\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x63\x3");
		sb.Append("\x2\x2\x2\x62\x64\x5!\x11\x2\x63\x62\x3\x2\x2\x2\x63\x64\x3");
		sb.Append("\x2\x2\x2\x64p\x3\x2\x2\x2\x65g\a/\x2\x2\x66\x65\x3\x2\x2\x2");
		sb.Append("\x66g\x3\x2\x2\x2gh\x3\x2\x2\x2hi\x5\x1F\x10\x2ij\x5!\x11\x2");
		sb.Append("jp\x3\x2\x2\x2km\a/\x2\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2mn\x3\x2");
		sb.Append("\x2\x2np\x5\x1F\x10\x2oY\x3\x2\x2\x2o\x66\x3\x2\x2\x2ol\x3\x2");
		sb.Append("\x2\x2p\x1E\x3\x2\x2\x2qz\a\x32\x2\x2rv\t\x6\x2\x2su\t\x5\x2");
		sb.Append("\x2ts\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2");
		sb.Append("wz\x3\x2\x2\x2xv\x3\x2\x2\x2yq\x3\x2\x2\x2yr\x3\x2\x2\x2z \x3");
		sb.Append("\x2\x2\x2{}\t\a\x2\x2|~\t\b\x2\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2");
		sb.Append("~\x7F\x3\x2\x2\x2\x7F\x80\x5\x1F\x10\x2\x80\"\x3\x2\x2\x2\x81");
		sb.Append("\x83\t\t\x2\x2\x82\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x82");
		sb.Append("\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87");
		sb.Append("\b\x12\x2\x2\x87$\x3\x2\x2\x2\x10\x2\x44\x46NY`\x63\x66lovy");
		sb.Append("}\x84\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
